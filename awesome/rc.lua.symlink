-- This is awesome :D
--
-- Reminder(s) to myself:
--
-- Printing stuff (like tables); Reuqires penlight ->
-- yaourt -S lua-penlight
-- 
-- local pprint = require 'pl.pretty'
-- pprint.write(sometable)		if you want a string
-- pprint.dump(anothertable)	if you want it to stdou

-- Paths

-- Includes
-- Standard awesome library
local gears			= require("gears")
local awful			= require("awful")
awful.rules			= require("awful.rules")
require("awful.autofocus")

local blingbling    = require("blingbling")

local lain			= require("lain")

-- Widget and layout library
local wibox			= require("wibox")
local vicious		= require("vicious")

-- Theme handling library
local beautiful		= require("beautiful")

-- Notification library
local naughty		= require("naughty")
local menubar		= require("menubar")

-- Own libs
-- run_once function - place callees at the bottom of rc..
require("lib/run_once")

-- Global variables
-- Used for including external files
_G.awful		= awful
_G.lain			= lain
_G.wibox		= wibox
_G.vicious		= vicious
_G.beautiful	= beautiful


local configdir = awful.util.getdir("config")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
	naughty.notify({ preset = naughty.config.presets.critical,
					 title = "Oops, there were errors during startup!",
					 text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
	local in_error = false
	awesome.connect_signal("debug::error", function (err)
		-- Make sure we don't go into an endless error loop
		if in_error then return end
		in_error = true

		naughty.notify({ preset = naughty.config.presets.critical,
						 title = "Oops, an error happened!",
						 text = err })
		in_error = false
	end)
end
-- }}}

--- {{{ Function definitions

-- scan directory, filter outputs optionally
function scan_directory(directory, filter)
	local i, t, popen = 0, {}, io.popen

	if not filter then
		filter = function(s) return true end
	end
	print(filter)

	for filename in popen('ls -a "'..directory..'"'):lines() do
		if filter(filename) then
			i = i + 1
			t[i] = filename
		end
	end

	return t
end

--- }}}


-- {{{ Variable definitions
-- Configure paths
--configpath = os.getenv


-- Themes define colours, icons, and wallpapers
--beautiful.init("/usr/share/awesome/themes/zenburn/theme.lua")
beautiful.init(configdir .. "/themes/powerarrow-darker/theme.lua")

-- This is used later as the default terminal and editor to run.
--terminal = 'urxvt -name Terminal -fn "xft:Monospace:pixelsize=12" -fade 20 +sb -depth 32 -bg rgba:0000/002b/0036/dddd'
--terminal = 'urxvt -name Terminal -fn "xft:Monospace:pixelsize=12" -fade 20 +sb -depth 32'
--terminal = 'lilyterm'
--terminal = 'urxvt'
terminal = 'st'
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor

-- System menu items--{{{
-- suspendcmd = "gksudo 'pm-suspend'"
-- shutdowncmd = "gksudo 'shutdown -hP now'"
-- restartcmd	= "gksudo 'reboot'"

suspendcmd =  "pm-suspend"
shutdowncmd = "shutdown -hP now"
restartcmd	= "reboot"
--}}}

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- User defined
altkey	   = "Mod1"
iptraf	   = terminal .. " --geometry=180x54-20+34 -e sudo iptraf-ng -i all "
--musicplr	 = terminal .. " --geometry=130x34-320+16 -e ncmpcpp "
musicplr = "clementine"

-- Table of layouts to cover with awful.layout.inc, order matters.
local layouts =
{
	awful.layout.suit.tile,
	awful.layout.suit.floating,
	awful.layout.suit.tile.left,
	awful.layout.suit.tile.bottom,
	awful.layout.suit.tile.top,
	awful.layout.suit.fair,
	awful.layout.suit.fair.horizontal,
	awful.layout.suit.spiral,
	awful.layout.suit.spiral.dwindle,
	awful.layout.suit.max,
	awful.layout.suit.max.fullscreen,
	awful.layout.suit.magnifier,
	lain.layout.uselesstile
}
-- }}}

-- {{{ Wallpaper

wp_index = 1
wp_timeout = 600 -- 10 minutes
wp_path = "/home/sosterwalder/ownCloud/wallpapers/"
wp_filter = function(s) return string.match(s, "%.jpg$") or string.match(s, "%.png$") end
wp_files = scan_directory(wp_path, wp_filter)

-- setup timer
wp_timer = timer { timeout = wp_timeout }
wp_timer:connect_signal("timeout", function()
	for s = 1, screen.count() do
		wp_index = math.random(1, #wp_files)
		gears.wallpaper.maximized(wp_path .. wp_files[wp_index], s, true)
	end

	wp_timer:stop()

	wp_index = math.random(1, #wp_files)

	wp_timer.timeout = wp_timeout
	wp_timer:start()
end)

wp_timer:start()

-- Set to random on startup
for s = 1, screen.count() do
	wp_index = math.random(1, #wp_files)
	gears.wallpaper.maximized(wp_path .. wp_files[wp_index], s, true)
end

-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
tags.settings = {}
tags.settings.names = {}
tags.settings.layout = {}

tags = {
	settings = {
		{
			--names   = { '1 ⎈⚫', '2 ✎⚫', '3 ☏⚫', '4 ⇵⚫', '5 ⎆⚫',  '6 ⛃⚫', '7 ♫⚫', '8 ✵‡', 9 },
			names = { 1, 2, '✉', 'im', 'office/reading', 6, '♫', '✎', 9 }, 
			layout	= {
				layouts[13],	-- 1
				layouts[10],	-- 2
				layouts[1],		-- 3
				layouts[1],		-- 4
				layouts[2],		-- 5
				layouts[1],		-- 6
				layouts[10],	-- 7
				layouts[10],	-- 8
				layouts[1]		-- 9
			}
		}
	}
}

for s = 1, screen.count() do
	-- Each screen has its own tag table.
	--tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[1]) 
	tags[s] = awful.tag(tags.settings[1].names, s, tags.settings[1].layout)
end
-- }}}

--{{{ Menu
--{{{ Session Menu
shutdownmenu = {
	{ "suspend (ram)", suspendcmd },
	{ "shutdown", shutdowncmd },
	{ "reboot", restartcmd },
	{ "logout", awesome.quit }
}
--}}}
--{{{ File Managers Menu
fm_menu = {
	{ "thunar", "thunar" },
}
--}}}
--{{{ Browsers Menu
browsers_menu = {
	{ "firefox", "firefox" },
}
--}}}
--{{{ Utils Menu
utils_menu = {
    { "ORACLE!! SQLDeveloper", "/opt/sqldeveloper/sqldeveloper/bin/sqldeveloper" }
}
--}}}
--{{{ Screens Menu
screens_menu = {
	{ "Default", "/home/sosterwalder/.screenlayout/default.sh" },
	{ "T410s", "/home/sosterwalder/.screenlayout/layout_thinkpad_t410s.sh" },
	{ "24inch-22inch", "/home/sosterwalder/.screenlayout/layout_24inch_22inch_dual.sh" },
}
--}}}
--{{{ Editors Menu
editors = {
	{ "emacs", "emacs" },
	{ "gvim", "gvim" }
}
--}}}
--{{{ Main Menu
mymainmenu = awful.menu({ items = { { "terminal", terminal },
									{ "editors", editors },
									{ "fileman", fm_menu },
									{ "browsers", browsers_menu },
									{ "utils", utils_menu },
									{ "screens", screens_menu },
									{ "system", shutdownmenu, beautiful.widget_st }
								  }
						})
--}}}
--}}}

-- {{{ Menu Launcher
--n2ilauncher = awful.widget.launcher({ image = image(beautiful.n2i), menu = mymainmenu })
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
mylauncher = awful.widget.launcher({ image = beautiful.n2i,
									 menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Wibox
markup = lain.util.markup
red    = "#EA6F81"
-- WIDGETS
-- Create a textclock widget
mytextclock = awful.widget.textclock()
local clock_widget = wibox.widget.background()
clock_widget:set_widget(mytextclock)
clock_widget:set_bg("#313131")

-- Keyboard map indicator and changer
kbdcfg = {}
kbdcfg.cmd = "setxkbmap"
kbdcfg.layout = { { "us", "intl", "pc105"}, { "ch", "", "pc105" } }
kbdcfg.current = 1	-- us is our default layout
kbdcfg.widget = wibox.widget.textbox()
kbdcfg.widget:set_text(" " .. kbdcfg.layout[kbdcfg.current][1] .. " ")
kbdcfg.switch = function ()
  kbdcfg.current = kbdcfg.current % #(kbdcfg.layout) + 1
  local t = kbdcfg.layout[kbdcfg.current]
  kbdcfg.widget:set_text(" " .. t[1] .. " ")
  os.execute( kbdcfg.cmd .. " -model " .. t[3] .. " -layout " .. t[1] .. " -variant " .. t[2] )
	naughty.notify({ preset = naughty.config.presets.info,
					 title = "Changed keyboard layout",
					 text = "Model: " .. t[3] .. "\nLayout: " .. t[1] .. "\nVariant: " .. t[2]})
					 --text = kbdcfg.cmd .. " -model " .. t[3] .. " -layout " .. t[1] .. " -variant " .. t[2]})
end
 -- Mouse bindings
kbdcfg.widget:buttons(
 awful.util.table.join(awful.button({ }, 1, function () kbdcfg.switch() end))
)
local kbdwidget = wibox.widget.background()
kbdwidget:set_widget(kbdcfg.widget)
kbdwidget:set_bg("#1a1a1a")

-- OS info
syswidget = wibox.widget.textbox()
vicious.register(syswidget, vicious.widgets.os, "$1 $2")

-- CPU widget (graph)
-- Icon
cpuicon = wibox.widget.imagebox(beautiful.widget_cpu)
-- Widget
cpuwidget = blingbling.line_graph({
    height = 18,
    width = 200,
    show_text = true,
    label = "Load: $percent %",
    rounded_size = 0.3,
    graph_background_color = "#0000030"
})
vicious.register(cpuwidget, vicious.widgets.cpu, "$1", 2)
-- Cache that shit
vicious.cache(vicious.widgets.cpu)

-- CPU cores (graph)
cores_graph_conf ={height = 18, width = 8, rounded_size = 0.3}
cores_graphs = {}
for i=1,8 do
  cores_graphs[i] = blingbling.progress_graph( cores_graph_conf)
  vicious.register(cores_graphs[i], vicious.widgets.cpu, "$"..(i+1).."",1)
end

-- Memory widget (textbox)
-- Icon
memicon = wibox.widget.imagebox(beautiful.widget_mem)
-- Initialize widgets
memusage = wibox.widget.textbox()
vicious.register(memusage, vicious.widgets.mem, "$2MB/$3MB", 13)
memgraph = blingbling.progress_graph({
    height = 18,
    width = 200,
    show_text = true,
    rounded_size = 0.0,
    label = "Memory: $percent %",
})
vicious.register(memgraph, vicious.widgets.mem, "$1", 13)
vicious.cache(vicious.widgets.mem)

fsicon = wibox.widget.imagebox(beautiful.widget_hdd)
-- / fs
fs_root = wibox.widget.textbox()
vicious.register(fs_root, vicious.widgets.fs, "${/ avail_gb} GB", 599)

-- /home fs
fs_home = wibox.widget.textbox()
vicious.register(fs_home, vicious.widgets.fs, "${/home avail_gb} GB", 599)

-- Cache that shit
vicious.cache(vicious.widgets.fs)

fswidget = lain.widgets.fs({
	settings  = function()
		widget:set_text(" " .. fs_now.used .. "% ")
	end
})
fswidgetbg = wibox.widget.background(fswidget, "#1a1a1a")

-- MPD
mpdicon = wibox.widget.imagebox(beautiful.widget_music)
mpdicon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(musicplr) end)))
mpdwidget = lain.widgets.mpd({
	settings = function()
		if mpd_now.state == "play" then
			artist = " " .. mpd_now.artist .. " "
			title  = mpd_now.title	.. " "
			mpdicon:set_image(beautiful.widget_music_on)
		elseif mpd_now.state == "pause" then
			artist = " mpd "
			title  = "paused "
		else
			artist = ""
			title  = ""
			mpdicon:set_image(beautiful.widget_music)
		end

		widget:set_markup(markup(red, artist) .. title)
	end
})
mpdwidgetbg = wibox.widget.background(mpdwidget, "#313131")

-- Net
neticon = wibox.widget.imagebox(beautiful.widget_net)
neticonup = wibox.widget.imagebox(beautiful.widget_net_up)
neticondown = wibox.widget.imagebox(beautiful.widget_net_up)
neticon:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn_with_shell(iptraf) end)))
netwidget = wibox.widget.background(lain.widgets.net({
	settings = function()
		widget:set_markup(markup("#7AC82E", " " .. net_now.received)
						  .. " " ..
						  markup("#EA6F81", " " .. net_now.sent .. " "))
	end
}), "#313131")

-- Separators
spr = wibox.widget.textbox(' ')
arrl = wibox.widget.imagebox()
arrl:set_image(beautiful.arrl)
arrl_dl = wibox.widget.imagebox()
arrl_dl:set_image(beautiful.arrl_dl)
arrl_ld = wibox.widget.imagebox()
arrl_ld:set_image(beautiful.arrl_ld)

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytag = {}
mytaglist.buttons = awful.util.table.join(
					awful.button({ }, 1, awful.tag.viewonly),
					awful.button({ modkey }, 1, awful.client.movetotag),
					awful.button({ }, 3, awful.tag.viewtoggle),
					awful.button({ modkey }, 3, awful.client.toggletag),
					awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
					awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
					)
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
					 awful.button({ }, 1, function (c)
											  if c == client.focus then
												  c.minimized = true
											  else
												  -- Without this, the following
												  -- :isvisible() makes no sense
												  c.minimized = false
												  if not c:isvisible() then
													  awful.tag.viewonly(c:tags()[1])
												  end
												  -- This will also un-minimize
												  -- the client, if needed
												  client.focus = c
												  c:raise()
											  end
										  end),
					 awful.button({ }, 3, function ()
											  if instance then
												  instance:hide()
												  instance = nil
											  else
												  instance = awful.menu.clients({ width=250 })
											  end
										  end),
					 awful.button({ }, 4, function ()
											  awful.client.focus.byidx(1)
											  if client.focus then client.focus:raise() end
										  end),
					 awful.button({ }, 5, function ()
											  awful.client.focus.byidx(-1)
											  if client.focus then client.focus:raise() end
										  end))

for s = 1, screen.count() do
	-- Create a promptbox for each screen
	mypromptbox[s] = awful.widget.prompt()

	-- Create an imagebox widget which will contains an icon indicating which layout we're using.
	-- We need one layoutbox per screen.
	mylayoutbox[s] = awful.widget.layoutbox(s)
	mylayoutbox[s]:buttons(awful.util.table.join(
						   awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
						   awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
						   awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
						   awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))

	-- Create a taglist widget
	mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

	-- Create a tasklist widget
	mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

	-- Create the wibox
	mywibox[s] = awful.wibox({ position = "top", screen = s --[[, bg = beautiful.wibox_bg_normal --]] })

	-- Widgets that are aligned to the left
	local left_layout = wibox.layout.fixed.horizontal()
	left_layout:add(spr)
	left_layout:add(mytaglist[s])
	left_layout:add(mypromptbox[s])
	left_layout:add(spr)

	-- Widgets that are aligned to the right
	local right_layout = wibox.layout.fixed.horizontal()
	right_layout:add(spr)
	right_layout:add(arrl)
	right_layout:add(arrl_ld)
	right_layout:add(mpdicon)
	right_layout:add(mpdwidget)
	right_layout:add(arrl_ld)
	right_layout:add(neticon)
	right_layout:add(netwidget)
	right_layout:add(arrl_dl)
	right_layout:add(kbdwidget)
	right_layout:add(arrl_dl)
	right_layout:add(wibox.widget.systray())
	right_layout:add(spr)
	right_layout:add(arrl_ld)
	right_layout:add(clock_widget)
	right_layout:add(arrl_dl)
	right_layout:add(mylayoutbox[s])

    -- Right layout for secondary screen
    local right_secondary_layout = wibox.layout.fixed.horizontal()
    right_secondary_layout:add(cpuicon)
    right_secondary_layout:add(cpuwidget)
    for i=1,8 do
        right_secondary_layout:add(cores_graphs[i])
    end
    right_secondary_layout:add(memicon)
    right_secondary_layout:add(memgraph)
    right_secondary_layout:add(memusage)
    right_secondary_layout:add(fsicon)
    right_secondary_layout:add(fs_root)
    right_secondary_layout:add(fs_home)
    right_secondary_layout:add(mylayoutbox[s])

	-- Now bring it all together (with the tasklist in the middle)
	local layout = wibox.layout.align.horizontal()
	layout:set_left(left_layout)
	layout:set_middle(mytasklist[s])
	
	if screen.count() > 1 then
		if s == 1 then
			layout:set_right(right_layout)
		else
			layout:set_right(right_secondary_layout)
		end
	else
		right_layout:add(cpuicon)
		right_layout:add(cpuwidget)
		for i=1,4 do
			right_layout:add(cores_graphs[i])
		end
		right_layout:add(memicon)
		right_layout:add(memgraph)
		right_layout:add(memusage)
		layout:set_right(right_layout)
	end

	mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
	awful.button({ }, 3, function () mymainmenu:toggle() end),
	awful.button({ }, 4, awful.tag.viewnext),
	awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
	awful.key({ modkey,			  }, "Left",   awful.tag.viewprev		),
	awful.key({ modkey,			  }, "Right",  awful.tag.viewnext		),
	awful.key({ modkey,			  }, "Escape", awful.tag.history.restore),

	awful.key({ modkey,			  }, "j",
		function ()
			awful.client.focus.byidx( 1)
			if client.focus then client.focus:raise() end
		end),
	awful.key({ modkey,			  }, "k",
		function ()
			awful.client.focus.byidx(-1)
			if client.focus then client.focus:raise() end
		end),
	awful.key({ modkey,			  }, "w", function () mymainmenu:show() end),

	-- Layout manipulation
	awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(	1)	  end),
	awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)	  end),
	awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
	awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
	awful.key({ modkey,			  }, "u", awful.client.urgent.jumpto),
	awful.key({ modkey,			  }, "Tab",
		function ()
			awful.client.focus.history.previous()
			if client.focus then
				client.focus:raise()
			end
		end),

	-- Standard program
	awful.key({ modkey,			  }, "Return", function () awful.util.spawn(terminal) end),
	awful.key({ modkey, "Control" }, "r", awesome.restart),
	awful.key({ modkey, "Shift"   }, "q", awesome.quit),

	awful.key({ modkey,			  }, "l",	  function () awful.tag.incmwfact( 0.05)	end),
	awful.key({ modkey,			  }, "h",	  function () awful.tag.incmwfact(-0.05)	end),
	awful.key({ modkey, "Shift"   }, "h",	  function () awful.tag.incnmaster( 1)		end),
	awful.key({ modkey, "Shift"   }, "l",	  function () awful.tag.incnmaster(-1)		end),
	awful.key({ modkey, "Control" }, "h",	  function () awful.tag.incncol( 1)			end),
	awful.key({ modkey, "Control" }, "l",	  function () awful.tag.incncol(-1)			end),
	awful.key({ modkey,			  }, "space", function () awful.layout.inc(layouts,  1) end),
	awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

	awful.key({ modkey, "Control" }, "n", awful.client.restore),

	-- Prompt
	awful.key({ modkey },			 "r",	  function () mypromptbox[mouse.screen]:run() end),

	awful.key({ modkey }, "x",
			  function ()
				  awful.prompt.run({ prompt = "Run Lua code: " },
				  mypromptbox[mouse.screen].widget,
				  awful.util.eval, nil,
				  awful.util.getdir("cache") .. "/history_eval")
			  end),

	-- Menubar
	awful.key({ modkey }, "p", function() menubar.show() end),
	-- Dmenu
	awful.key({ modkey }, "d", function() awful.util.spawn("dmenu_run") end),

	-- Lock
	awful.key({ modkey, "Control", "Shift" }, "l", function() awful.util.spawn("i3lock") end),

	-- Multimedia keys
	awful.key({ }, "XF86AudioPlay", 
		function ()
			-- Clementine
			--run_once("clementine")
			--os.execute("clementine --play-pause")

			-- Spotify
			run_once ("spotify")
			awful.util.spawn("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause")
		end
	),
	awful.key({ }, "XF86AudioNext", 
		function () 
			-- os.execute("clementine --next")
			awful.util.spawn("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next") 
		end
	),
	awful.key({ }, "XF86AudioPrev", 
		function ()
			--os.execute("clementine --previous")
			awful.util.spawn("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous") 
		end
	),
	awful.key({ }, "XF86AudioRaiseVolume", 
		function () 
			awful.util.spawn("amixer -c 0 set Master 1dB+") 
		end
	),
	awful.key({ }, "XF86AudioLowerVolume", 
		function () 
			awful.util.spawn("amixer -c 0 set Master 1dB-") 
		end
	),
	awful.key({ }, "XF86AudioMute", 
		function () 
			awful.util.spawn("amixer -q set Master playback toggle") 
		end
	),

	-- ALSA volume control
	awful.key({ altkey }, "Up",
		function ()
			awful.util.spawn("amixer -q set Master 1%+")
		end),
	awful.key({ altkey }, "Down",
		function ()
			awful.util.spawn("amixer -q set Master 1%-")
		end),
	awful.key({ altkey }, "m",
		function ()
			awful.util.spawn("amixer -q set Master playback toggle")
		end),
	awful.key({ altkey, "Control" }, "m",
		function ()
			awful.util.spawn("amixer -q set Master playback 100%")
		end),

	-- MPD control
	awful.key({ altkey, "Control" }, "Up",
		function ()
			awful.util.spawn_with_shell("mpc toggle || ncmpcpp toggle || ncmpc toggle || pms toggle || clementine -t")
			mpdwidget.update()
		end),
	awful.key({ altkey, "Control" }, "Down",
		function ()
			awful.util.spawn_with_shell("mpc stop || ncmpcpp stop || ncmpc stop || pms stop || clementine -s")
			mpdwidget.update()
		end),
	awful.key({ altkey, "Control" }, "Left",
		function ()
			awful.util.spawn_with_shell("mpc prev || ncmpcpp prev || ncmpc prev || pms prev || clementine -r")
			mpdwidget.update()
		end),
	awful.key({ altkey, "Control" }, "Right",
		function ()
			awful.util.spawn_with_shell("mpc next || ncmpcpp next || ncmpc next || pms next || clementine -f")
			mpdwidget.update()
		end)
)

clientkeys = awful.util.table.join(
	awful.key({ modkey,			  }, "f",	   function (c) c.fullscreen = not c.fullscreen  end),
	awful.key({ modkey, "Shift"   }, "c",	   function (c) c:kill()						 end),
	awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle						),
	awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
	awful.key({ modkey,			  }, "o",	   awful.client.movetoscreen						),
	awful.key({ modkey,			  }, "t",	   function (c) c.ontop = not c.ontop			 end),
	awful.key({ modkey,			  }, "n",
		function (c)
			-- The client currently has the input focus, so it cannot be
			-- minimized, since minimized clients can't have the focus.
			c.minimized = true
		end),
	awful.key({ modkey,			  }, "m",
		function (c)
			c.maximized_horizontal = not c.maximized_horizontal
			c.maximized_vertical   = not c.maximized_vertical
		end)
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
	globalkeys = awful.util.table.join(globalkeys,
		awful.key({ modkey }, "#" .. i + 9,
				  function ()
						local screen = mouse.screen
						local tag = awful.tag.gettags(screen)[i]
						if tag then
						   awful.tag.viewonly(tag)
						end
				  end),
		awful.key({ modkey, "Control" }, "#" .. i + 9,
				  function ()
					  local screen = mouse.screen
					  local tag = awful.tag.gettags(screen)[i]
					  if tag then
						 awful.tag.viewtoggle(tag)
					  end
				  end),
		awful.key({ modkey, "Shift" }, "#" .. i + 9,
				  function ()
					  local tag = awful.tag.gettags(client.focus.screen)[i]
					  if client.focus and tag then
						  awful.client.movetotag(tag)
					 end
				  end),
		awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
				  function ()
					  local tag = awful.tag.gettags(client.focus.screen)[i]
					  if client.focus and tag then
						  awful.client.toggletag(tag)
					  end
				  end))
end

clientbuttons = awful.util.table.join(
	awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
	awful.button({ modkey }, 1, awful.mouse.client.move),
	awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Get window classes with
--		xprop | grep --color=none "WM_CLASS\|^WM_NAME"
--	-> Second line, second param, e.g.:
--		WM_NAME(STRING) = "Spotify Premium - Linux Preview"
--		WM_CLASS(STRING) = "spotify", "Spotify"
--		
--		-> Spotify
awful.rules.rules = {
	-- All clients will match this rule.
	{ rule = { },
	  properties = { border_width = beautiful.border_width,
					 border_color = beautiful.border_normal,
					 focus = awful.client.focus.filter,
					 keys = clientkeys,
					 buttons = clientbuttons } },
	{ rule = { class = "MPlayer" },
	  properties = { floating = true } },
	{ rule = { class = "pinentry" },
	  properties = { floating = true } },
	{ rule = { class = "gimp" },
	  properties = { floating = true } },
	
	-- Set Firefox to always map on tags number 2 of current screen.
	 { rule = { class = "Firefox" },
	   properties = { tag = tags[1][2], floating = false } },
	
	{ rule = { class = "Gvim" },
	  properties = { tag = tags[1][8], floating = false } },

	{ rule = { class = "KeePass2" },
	  properties = { tag = tags[1][6], floating = false } },

	{ rule = { class = "Zathura" },
	  properties = { tag = tags[1][5], floating = false } },

	{ rule = { class = "libreoffice-impress" },
	  properties = { tag = tags[1][5], floating = false } },

	{ rule = { class = "Eclipse" },
	  properties = { tag = tags[1][8], floating = false } },

	{ rule = { class = "plugin-container"},
	  properties = {floating = true } },

	{ rule = { class = "Exe"},
	  properties = {floating = true } },
}

local screen_to_add = 1
if screen.count() > 1 then
	screen_to_add = 2
end

-- Spotify
rule = { 
	rule = { class = "Spotify" }, 
	properties = { 
		tag = tags[screen_to_add][7], floating = false 
	} 
}
table.insert(awful.rules.rules, rule)

-- Clementine
rule = { 
	rule = { class = "Clementine" }, 
	properties = { 
		tag = tags[screen_to_add][7], floating = false 
	} 
}
table.insert(awful.rules.rules, rule)

screen_to_add = nil

-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
	-- Enable sloppy focus
	c:connect_signal("mouse::enter", function(c)
		if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
			and awful.client.focus.filter(c) then
			client.focus = c
		end
	end)

	if not startup then
		-- Set the windows at the slave,
		-- i.e. put it at the end of others instead of setting it master.
		-- awful.client.setslave(c)

		-- Put windows in a smart way, only if they does not set an initial position.
		if not c.size_hints.user_position and not c.size_hints.program_position then
			awful.placement.no_overlap(c)
			awful.placement.no_offscreen(c)
		end
	end

	local titlebars_enabled = false
	if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
		-- buttons for the titlebar
		local buttons = awful.util.table.join(
				awful.button({ }, 1, function()
					client.focus = c
					c:raise()
					awful.mouse.client.move(c)
				end),
				awful.button({ }, 3, function()
					client.focus = c
					c:raise()
					awful.mouse.client.resize(c)
				end)
				)

		-- Widgets that are aligned to the left
		local left_layout = wibox.layout.fixed.horizontal()
		left_layout:add(awful.titlebar.widget.iconwidget(c))
		left_layout:buttons(buttons)

		-- Widgets that are aligned to the right
		local right_layout = wibox.layout.fixed.horizontal()
		right_layout:add(awful.titlebar.widget.floatingbutton(c))
		right_layout:add(awful.titlebar.widget.maximizedbutton(c))
		right_layout:add(awful.titlebar.widget.stickybutton(c))
		right_layout:add(awful.titlebar.widget.ontopbutton(c))
		right_layout:add(awful.titlebar.widget.closebutton(c))

		-- The title goes in the middle
		local middle_layout = wibox.layout.flex.horizontal()
		local title = awful.titlebar.widget.titlewidget(c)
		title:set_align("center")
		middle_layout:add(title)
		middle_layout:buttons(buttons)

		-- Now bring it all together
		local layout = wibox.layout.align.horizontal()
		layout:set_left(left_layout)
		layout:set_right(right_layout)
		layout:set_middle(middle_layout)

		awful.titlebar(c):set_widget(layout)
	end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

-- Run these apps once - also called autostart
run_once("/usr/bin/easystroke")
--run_once("/usr/bin/fehlstart")
--run_once("/usr/bin/gnome-screensaver")
run_once("/usr/bin/nm-applet")
--run_once("/usr/bin/pnmixer")
run_once("~/.screenlayout/default.sh")
run_once("clipit")
--run_once("batti")
--run_once("xfce4-power-manager")
--run_once("xfce4-volumed-pulse")
run_once("/usr/bin/compton --config /home/so/.config/compton.conf -bcCGf -D1")
run_once("setxkbmap -model pc105 -layout us -variant intl")
run_once("fluxgui")
-- }}}
